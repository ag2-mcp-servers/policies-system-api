# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:01:27+00:00



import argparse
import json
import os
from typing import *

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header

from models import (
    ApiPolicyEngineEvaluatePostResponse,
    ApiPolicyEnginePoliciesGetResponse,
    ApiPolicyEnginePoliciesIdGetResponse,
    ApiPolicyEnginePoliciesIdPostResponse,
    ApiPolicyEnginePoliciesIdPutResponse,
    EvaluatePolicyRequest,
    PolicySaveRequest,
)

app = MCPProxy(
    contact={},
    description='\r\n This API will create promotion alarms when selling products with undesired prices and promotions. It will create conditions that will check if the prices and the promotions are correct. If not, the system will alarm the store with information about the product sold at unexpected prices.\r\n\r\n ## Index\r\n\r\n `GET` [Get Policy List](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies)\r\n `POST` [Evaluate Policies](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/evaluate)\r\n `GET` [Get Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#get-/api/policy-engine/policies/-id-)\r\n `POST` [Create Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#post-/api/policy-engine/policies/-id-)\r\n `PUT` [Update Policy](https://developers.vtex.com/docs/api-reference/policies-system-api#put-/api/policy-engine/policies/-id-)\r\n `DELETE` [Delete Policy by ID](https://developers.vtex.com/docs/api-reference/policies-system-api#delete-/api/policy-engine/policies/-id-)',
    title='Policies System API',
    version='1.0.0',
    servers=[
        {'url': 'https://vtex.local'},
        {
            'description': 'VTEX server url',
            'url': 'https://{accountName}.{environment}.com.br',
            'variables': {
                'accountName': {
                    'default': '{accountName}',
                    'description': 'Name of the VTEX account. Used as part of the URL',
                },
                'environment': {
                    'default': '{environment}',
                    'description': 'Environment to use. Used as part of the URL.',
                },
            },
        },
    ],
)


@app.post(
    '/api/policy-engine/evaluate',
    description=""" This endpoint consults all policies and checks the ones that satisfy the request bodyâ€™s conditions. """,
    tags=['policy_management'],
)
def policy__evaluate(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    body: EvaluatePolicyRequest = ...,
):
    """
    Evaluate Policies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/policy-engine/policies',
    description=""" Retrieves a list of all policies in the account and general information of each policy. """,
    tags=['policy_management'],
)
def policy__list(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Policy List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/api/policy-engine/policies/{id}',
    description=""" Deletes a specific policy of the account by its ID. """,
    tags=['policy_management'],
)
def policy__delete(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: str = 'pa_test_001',
):
    """
    Delete Policy by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/api/policy-engine/policies/{id}',
    description=""" Retrieves general information of a policy by its ID. """,
    tags=['policy_management'],
)
def policy__get(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: str = 'pa_test_001',
):
    """
    Get Policy by ID
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/api/policy-engine/policies/{id}',
    description=""" Creates a new policy from scratch. """,
    tags=['policy_management'],
)
def policy__create_or_update(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: str = 'pa_test_001',
    body: PolicySaveRequest = None,
):
    """
    Create Policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/api/policy-engine/policies/{id}',
    description=""" Updates an existing policy at your account. """,
    tags=['policy_management'],
)
def put_api_policy_engine_policies__id(
    content__type: str = Header(..., alias='Content-Type'),
    accept: str = Header(..., alias='Accept'),
    id: str = 'pa_test_001',
    body: PolicySaveRequest = ...,
):
    """
    Update Policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
