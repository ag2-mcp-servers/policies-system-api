# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T12:01:27+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import BaseModel, Field, RootModel


class AccountType(Enum):
    integer_0 = 0
    integer_1 = 1


class EvaluatePolicyRequest(BaseModel):
    context: Dict[str, Any] = Field(
        ..., description='Conditions that the Policy needs to satisfy', title='context'
    )
    resource: str = Field(
        ...,
        description='Scope on which this policy must be evaluated',
        title='resource',
    )


class PolicyActionGetResponse(BaseModel):
    id: Optional[str] = Field(None, description='Action ID', title='id')
    metadata: Optional[Dict[str, Any]] = Field(
        None, description='Metadata object from the current action', title='metadata'
    )


class Actions(BaseModel):
    id: Optional[str] = Field(
        None,
        description='Action ID. The possible values can be `SendSlackMessage`, `SendEmail`, and `DeactivatePromotions`',
        title='id',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None, description='Data inside of the actions', title='metadata'
    )


class Condition1(BaseModel):
    conditions: Optional[List[str]] = Field(
        None,
        description='These are the conditions the actions can have. The possible values are `[]`, `stringEquals`, and `numericGreaterThan`',
        title='conditions',
    )
    key: Optional[str] = Field(
        None,
        description='The element that will define what the policy will influence. This field has the possible values `skuId`, `brandId`, `discountPercentage`',
        title='key',
    )
    operation: Optional[str] = Field(
        None,
        description='The action of the condition. This operation possible values are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`',
        title='operation',
    )
    values: Optional[List[str]] = Field(
        None, description='Value of the key', title='values'
    )


class Condition(BaseModel):
    conditions: Optional[List[Condition1]] = Field(
        None, description='List of conditions that will activate the policy'
    )


class StatementGetResponse(BaseModel):
    actions: Optional[Union[List, Actions]] = Field(
        None, description='Actions that the Policy will execute', title='actions'
    )
    condition: Optional[Condition] = Field(
        None,
        description='Condition to activate this policy. This object can have a maximum of ten recursive conditions',
        title='condition',
    )
    effect: str = Field(
        ...,
        description='This field is not functional at the moment. To create a correct request, fill the field with `Allow`',
        title='effect',
    )
    operation: Optional[str] = Field(
        None,
        description='This operation will determine if all the conditions need to be valid or at least one of them, if the conditions array is not empty.  The possible values to these fields are `None`, `stringEquals`, `stringEqualsIgnoreCase`, `numericEquals`, `numericLessThan`, `numericLessThanEquals`,   `numericGreaterThan`, `numericGreaterThanEquals`, `bool`, `not`, `or`, `and`, `dateTimeUtcGreaterThan`, `dateTimeUtcLessThan`, and `between`',
        title='operation',
    )
    resource: Optional[str] = Field(
        None,
        description='Scope on which this policy must be evaluated',
        title='resource',
    )


class ApiPolicyEngineEvaluatePostResponse(RootModel[List[PolicyActionGetResponse]]):
    root: List[PolicyActionGetResponse] = Field(
        ...,
        examples=[
            [
                {
                    'id': 'SendSlackMessage',
                    'metadata': {
                        'alertDescription': 'Avoid selling products from Berenice with a discount greater than 70%.',
                        'channel': 'C01NJFF35R6',
                        'relatedUsers': ['URUNDC2NB'],
                    },
                }
            ]
        ],
    )


class Account(BaseModel):
    accountType: Optional[AccountType] = None
    id: Optional[str] = None
    isActive: Optional[bool] = None
    isOperating: Optional[bool] = None
    mainAccountName: Optional[str] = None
    name: Optional[str] = None
    operationDate: Optional[datetime] = None


class PolicyGetResponse(BaseModel):
    description: Optional[str] = Field(
        None,
        description='Policy description. This description is only for internal use of identification',
        title='description',
    )
    id: Optional[str] = Field(None, description='Policy ID', title='id')
    name: Optional[str] = Field(None, description='Policy Name', title='name')
    statements: Optional[List[StatementGetResponse]] = Field(
        None, description='Requirements to the Policy be applied', title='statements'
    )


class PolicySaveRequest(BaseModel):
    description: str = Field(
        ...,
        description='Policy description. This description is only for internal use of identification',
        title='description',
    )
    name: str = Field(..., description='Policy Name', title='name')
    statements: List[StatementGetResponse] = Field(
        ..., description='Requirements to the Policy be applied', title='statements'
    )


class ApiPolicyEnginePoliciesGetResponse(RootModel[List[PolicyGetResponse]]):
    root: List[PolicyGetResponse] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'TesteMarcosPromotionsAlert',
                    'id': 'pa_test_001',
                    'name': 'TestAlarmBerenice',
                    'statements': [
                        {
                            'actions': [
                                {
                                    'id': 'SendSlackMessage',
                                    'metadata': {
                                        'alertDescription': 'Avoid selling products from Berenice with a discount greater than 70%.',
                                        'channel': 'C01NJFF35R6',
                                        'relatedUsers': ['URUNDC2NB'],
                                    },
                                }
                            ],
                            'condition': {
                                'conditions': [
                                    {
                                        'conditions': [],
                                        'key': 'brandId',
                                        'operation': 'stringEquals',
                                        'values': ['2000001'],
                                    },
                                    {
                                        'conditions': [],
                                        'key': 'discountPercentage',
                                        'operation': 'numericGreaterThan',
                                        'values': ['70.00'],
                                    },
                                ],
                                'operation': 'and',
                            },
                            'effect': 'Allow',
                            'resource': 'vrn:vtex.promotions-alert:aws-us-east-1:kamila:master:/_v/promotions_alert',
                        }
                    ],
                }
            ]
        ],
    )


class ApiPolicyEnginePoliciesIdGetResponse(RootModel[List[PolicyGetResponse]]):
    root: List[PolicyGetResponse] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'TesteMarcosPromotionsAlert',
                    'id': 'pa_test_001',
                    'name': 'TestAlarmBerenice',
                    'statements': [
                        {
                            'actions': [
                                {
                                    'id': 'SendSlackMessage',
                                    'metadata': {
                                        'alertDescription': 'Avoid selling products from Berenice with a discount greater than 70%.',
                                        'channel': 'C01NJFF35R6',
                                        'relatedUsers': ['URUNDC2NB'],
                                    },
                                }
                            ],
                            'condition': {
                                'conditions': [
                                    {
                                        'conditions': [],
                                        'key': 'brandId',
                                        'operation': 'stringEquals',
                                        'values': ['2000001'],
                                    },
                                    {
                                        'conditions': [],
                                        'key': 'discountPercentage',
                                        'operation': 'numericGreaterThan',
                                        'values': ['70.00'],
                                    },
                                ],
                                'operation': 'and',
                            },
                            'effect': 'Allow',
                            'resource': 'vrn:vtex.promotions-alert:aws-us-east-1:kamila:master:/_v/promotions_alert',
                        }
                    ],
                }
            ]
        ],
    )


class ApiPolicyEnginePoliciesIdPostResponse(RootModel[List[PolicyGetResponse]]):
    root: List[PolicyGetResponse] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'TesteMarcosPromotionsAlert',
                    'id': 'pa_test_001',
                    'name': 'TestAlarmBerenice',
                    'statements': [
                        {
                            'actions': [
                                {
                                    'id': 'SendSlackMessage',
                                    'metadata': {
                                        'alertDescription': 'Avoid selling products from Berenice with a discount greater than 70%.',
                                        'channel': 'C01NJFF35R6',
                                        'relatedUsers': ['URUNDC2NB'],
                                    },
                                }
                            ],
                            'condition': {
                                'conditions': [
                                    {
                                        'conditions': [],
                                        'key': 'brandId',
                                        'operation': 'stringEquals',
                                        'values': ['2000001'],
                                    },
                                    {
                                        'conditions': [],
                                        'key': 'discountPercentage',
                                        'operation': 'numericGreaterThan',
                                        'values': ['70.00'],
                                    },
                                ],
                                'operation': 'and',
                            },
                            'resource': 'vrn:vtex.promotions-alert:aws-us-east-1:kamila:master:/_v/promotions_alert',
                        }
                    ],
                }
            ]
        ],
    )


class ApiPolicyEnginePoliciesIdPutResponse(RootModel[List[PolicyGetResponse]]):
    root: List[PolicyGetResponse] = Field(
        ...,
        examples=[
            [
                {
                    'description': 'TesteMarcosPromotionsAlert',
                    'id': 'pa_test_001',
                    'name': 'TestAlarmBerenice',
                    'statements': [
                        {
                            'actions': [
                                {
                                    'id': 'SendSlackMessage',
                                    'metadata': {
                                        'alertDescription': 'Avoid selling products from Berenice with a discount greater than 40%.',
                                        'channel': 'C01NJFF35R6',
                                        'relatedUsers': ['URUNDC2NB'],
                                    },
                                }
                            ],
                            'condition': {
                                'conditions': [
                                    {
                                        'conditions': [],
                                        'key': 'brandId',
                                        'operation': 'stringEquals',
                                        'values': ['2000001'],
                                    },
                                    {
                                        'conditions': [],
                                        'key': 'discountPercentage',
                                        'operation': 'numericGreaterThan',
                                        'values': ['40.00'],
                                    },
                                ],
                                'operation': 'and',
                            },
                            'effect': 'Allow',
                            'resource': 'vrn:vtex.promotions-alert:aws-us-east-1:kamila:master:/_v/promotions_alert',
                        }
                    ],
                }
            ]
        ],
    )
